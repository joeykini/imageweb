// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 用戶模型
model User {
  id            String         @id @default(cuid())
  clerkId       String?        @unique
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  imageUrl      String?
  password      String?
  role          String         @default("user") // user, admin, superadmin
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  points        Points?        // 用戶積分
  subscription  Subscription?  // 用戶訂閱計劃
  orders        Order[]        // 用戶訂單
  generations   Generation[]   // 用戶生成記錄
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 積分模型
model Points {
  id        String   @id @default(cuid())
  amount    Int      @default(0)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 訂閱計劃模型
model Subscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId   String?   @unique
  stripeSubscriptionId String? @unique
  stripePriceId      String?
  stripeCurrentPeriodEnd DateTime?
  plan               String?   // basic, pro, enterprise
  status             String?   // active, canceled, past_due
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// 訂單模型
model Order {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Int       // 訂單金額（分）
  pointsAmount    Int       // 購買的積分數量
  status          String    @default("pending") // pending, success, failed, refunded
  paymentMethod   String    // wechat, alipay, stripe, usdt
  paymentId       String?   // 第三方支付ID
  transactionId   String?   // 交易ID
  metadata        Json?     // 其他元數據
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  paymentProof    String?   // 支付證明截圖(加密貨幣)
}

// 圖像生成記錄
model Generation {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt        String    @db.Text
  modelId       String    // 使用的模型
  styleId       String?   // 使用的風格
  imageUrls     String[]  // 生成的圖片URL數組
  status        String    @default("pending") // pending, processing, completed, failed
  pointsCost    Int       // 消耗的積分
  metadata      Json?     // 其他元數據
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 系統設置
model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

// API模型配置
model ApiModel {
  id          String    @id @default(cuid())
  name        String    @unique
  provider    String    // openai, stabilityai, midjourney, etc.
  modelId     String    // 提供商的模型ID
  description String?
  pointsCost  Int       // 每次使用消耗的積分
  isActive    Boolean   @default(true)
  metadata    Json?     // 其他模型配置
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// 風格模板
model StyleTemplate {
  id          String   @id @default(cuid())
  name        String
  styleId     String   @unique
  description String?
  imageUrl    String
  promptBase  String?  // 基礎提示詞模板
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
} 